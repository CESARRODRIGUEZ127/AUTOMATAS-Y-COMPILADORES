%option noyywrap
%{
#include <stdio.h>
#include <string.h>

int keyword_count = 0, comment_count = 0, variable_count = 0, 
    numeric_count = 0, arithmetic_op_count = 0, logical_op_count = 0, special_symbol_count = 0;

const char *keywords[] = {
    "auto", "break", "case", "char", "const", "continue", "default", "do", "double", 
    "else", "enum", "extern", "float", "for", "goto", "if", "inline", "int", "long", 
    "namespace", "operator", "private", "protected", "public", "register", "return", 
    "short", "signed", "sizeof", "static", "struct", "switch", "template", "this", 
    "throw", "try", "typedef", "union", "unsigned", "using", "virtual", "void", 
    "volatile", "while", "bool", "class", "const_cast", "delete", "dynamic_cast", 
    "explicit", "export", "false", "friend", "mutable", "new", "reinterpret_cast", 
    "static_cast", "true", "typeid", "typename", "wchar_t"
};
int is_keyword(const char *word) {
    for (int i = 0; i < sizeof(keywords) / sizeof(keywords[0]); i++) {
        if (strcmp(word, keywords[i]) == 0) {
            return 1;
        }
    }
    return 0;
}
%}

%%
\/\/[^\n]*                 { comment_count++; }           // Comentarios de una línea
\/\*([^*]|\*+[^/])*\*\/    { comment_count++; }           // Comentarios de varias líneas
[a-zA-Z_][a-zA-Z0-9_]*     {
                            if (is_keyword(yytext)) {
                                keyword_count++;
                            } else {
                                variable_count++;
                            }
                          }
[0-9]+(\.[0-9]+)?           { numeric_count++; }           // Constantes numéricas
[+\-*/%]                   { arithmetic_op_count++; }     // Operadores aritméticos
(&&|\|\||!)                { logical_op_count++; }        // Operadores lógicos
[<>=!]=?                   { logical_op_count++; }        // Comparadores lógicos
[\[\]{}();,:#]             { special_symbol_count++; }    // Símbolos especiales
[ \t\n]+                   { /* Ignorar espacios y saltos */ }
.                          { /* Ignorar cualquier otro carácter */ }

%%
int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Uso: %s <archivo_codigo.cpp>\n", argv[0]);
        return 1;
    }
    
    FILE *file = fopen(argv[1], "r");
    if (!file) {
        printf("Error al abrir el archivo: %s\n", argv[1]);
        return 1;
    }

    yyin = file;
    yylex();
    fclose(file);

    printf("Resumen del análisis:\n");
    printf("Palabras reservadas: %d\n", keyword_count);
    printf("Comentarios: %d\n", comment_count);
    printf("Nombres de variables: %d\n", variable_count);
    printf("Constantes numéricas: %d\n", numeric_count);
    printf("Operadores aritméticos: %d\n", arithmetic_op_count);
    printf("Operadores lógicos: %d\n", logical_op_count);
    printf("Símbolos especiales: %d\n", special_symbol_count);

    return 0;
}
